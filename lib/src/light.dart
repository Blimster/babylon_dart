part of babylon;

/// class Light
@JS()
abstract class Light extends Node {
  external num get range;
  external num get intensityMode;
  external num get radius;
  external bool get shadowEnabled;
  external List<AbstractMesh> get includedOnlyMeshes;
  external List<AbstractMesh> get excludedMeshes;
  external num get excludeWithLayerMask;
  external num get includeOnlyWithLayerMask;
  external num get lightmapMode;
  external static num get FALLOFF_DEFAULT;
  external static num get FALLOFF_PHYSICAL;
  external static num get FALLOFF_GLTF;
  external static num get FALLOFF_STANDARD;
  external static num get LIGHTMAP_DEFAULT;
  external static num get LIGHTMAP_SPECULAR;
  external static num get LIGHTMAP_SHADOWSONLY;
  external static num get INTENSITYMODE_AUTOMATIC;
  external static num get INTENSITYMODE_LUMINOUSPOWER;
  external static num get INTENSITYMODE_LUMINOUSINTENSITY;
  external static num get INTENSITYMODE_ILLUMINANCE;
  external static num get INTENSITYMODE_LUMINANCE;
  external static num get LIGHTTYPEID_POINTLIGHT;
  external static num get LIGHTTYPEID_DIRECTIONALLIGHT;
  external static num get LIGHTTYPEID_SPOTLIGHT;
  external static num get LIGHTTYPEID_HEMISPHERICLIGHT;
  external Color3 get diffuse;
  external Color3 get specular;
  external num get falloffType;
  external num get intensity;
  external num get renderPriority;
  external set range(num value);
  external set intensityMode(num value);
  external set radius(num value);
  external set shadowEnabled(bool value);
  external set includedOnlyMeshes(List<AbstractMesh> value);
  external set excludedMeshes(List<AbstractMesh> value);
  external set excludeWithLayerMask(num value);
  external set includeOnlyWithLayerMask(num value);
  external set lightmapMode(num value);
  external set diffuse(Color3 diffuse);
  external set specular(Color3 specular);
  external set falloffType(num falloffType);
  external set intensity(num intensity);
  external set renderPriority(num renderPriority);
  external Light transferToEffect(Effect effect, String lightIndex);
  external Light transferTexturesToEffect(Effect effect, String lightIndex);
  external Light transferToNodeMaterialEffect(Effect effect, String lightDataUniformName);
  external String getClassName();
  external String toString([bool fullDetails]);
  external void setEnabled(bool value);
  external IShadowGenerator getShadowGenerator();
  external Vector3 getAbsolutePosition();
  external bool canAffectMesh(AbstractMesh mesh);
  external static num CompareLightsPriority(Light a, Light b);
  external void dispose([bool doNotRecurse, bool disposeMaterialAndTextures]);
  external num getTypeID();
  external num getScaledIntensity();
  external Light clone(String name);
  external dynamic serialize();
  external static Light Parse(dynamic parsedLight, Scene scene);
  external void prepareLightSpecificDefines(dynamic defines, num lightIndex);
}
