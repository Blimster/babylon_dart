part of babylon;

/// class Engine
@JS()
class Engine extends ThinEngine {
  external Engine();
  external Engine.args(dynamic canvasOrContext, [bool antialias, EngineOptions options, bool adaptToDeviceRatio]);
  external String get NpmPackage;
  external String get Version;
  external List<Engine> get Instances;
  external Engine get LastCreatedEngine;
  external Scene get LastCreatedScene;
  external PerformanceMonitor get performanceMonitor;
  external ILoadingScreen get loadingScreen;
  external static num get ALPHA_DISABLE;
  external static num get ALPHA_ADD;
  external static num get ALPHA_COMBINE;
  external static num get ALPHA_SUBTRACT;
  external static num get ALPHA_MULTIPLY;
  external static num get ALPHA_MAXIMIZED;
  external static num get ALPHA_ONEONE;
  external static num get ALPHA_PREMULTIPLIED;
  external static num get ALPHA_PREMULTIPLIED_PORTERDUFF;
  external static num get ALPHA_INTERPOLATE;
  external static num get ALPHA_SCREENMODE;
  external static num get DELAYLOADSTATE_NONE;
  external static num get DELAYLOADSTATE_LOADED;
  external static num get DELAYLOADSTATE_LOADING;
  external static num get DELAYLOADSTATE_NOTLOADED;
  external static num get NEVER;
  external static num get ALWAYS;
  external static num get LESS;
  external static num get EQUAL;
  external static num get LEQUAL;
  external static num get GREATER;
  external static num get GEQUAL;
  external static num get NOTEQUAL;
  external static num get KEEP;
  external static num get REPLACE;
  external static num get INCR;
  external static num get DECR;
  external static num get INVERT;
  external static num get INCR_WRAP;
  external static num get DECR_WRAP;
  external static num get TEXTURE_CLAMP_ADDRESSMODE;
  external static num get TEXTURE_WRAP_ADDRESSMODE;
  external static num get TEXTURE_MIRROR_ADDRESSMODE;
  external static num get TEXTUREFORMAT_ALPHA;
  external static num get TEXTUREFORMAT_LUMINANCE;
  external static num get TEXTUREFORMAT_LUMINANCE_ALPHA;
  external static num get TEXTUREFORMAT_RGB;
  external static num get TEXTUREFORMAT_RGBA;
  external static num get TEXTUREFORMAT_RED;
  external static num get TEXTUREFORMAT_R;
  external static num get TEXTUREFORMAT_RG;
  external static num get TEXTUREFORMAT_RED_INTEGER;
  external static num get TEXTUREFORMAT_R_INTEGER;
  external static num get TEXTUREFORMAT_RG_INTEGER;
  external static num get TEXTUREFORMAT_RGB_INTEGER;
  external static num get TEXTUREFORMAT_RGBA_INTEGER;
  external static num get TEXTURETYPE_UNSIGNED_BYTE;
  external static num get TEXTURETYPE_UNSIGNED_INT;
  external static num get TEXTURETYPE_FLOAT;
  external static num get TEXTURETYPE_HALF_FLOAT;
  external static num get TEXTURETYPE_BYTE;
  external static num get TEXTURETYPE_SHORT;
  external static num get TEXTURETYPE_UNSIGNED_SHORT;
  external static num get TEXTURETYPE_INT;
  external static num get TEXTURETYPE_UNSIGNED_INTEGER;
  external static num get TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4;
  external static num get TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1;
  external static num get TEXTURETYPE_UNSIGNED_SHORT_5_6_5;
  external static num get TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV;
  external static num get TEXTURETYPE_UNSIGNED_INT_24_8;
  external static num get TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;
  external static num get TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV;
  external static num get TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV;
  external static num get TEXTURE_NEAREST_SAMPLINGMODE;
  external static num get TEXTURE_BILINEAR_SAMPLINGMODE;
  external static num get TEXTURE_TRILINEAR_SAMPLINGMODE;
  external static num get TEXTURE_NEAREST_NEAREST_MIPLINEAR;
  external static num get TEXTURE_LINEAR_LINEAR_MIPNEAREST;
  external static num get TEXTURE_LINEAR_LINEAR_MIPLINEAR;
  external static num get TEXTURE_NEAREST_NEAREST_MIPNEAREST;
  external static num get TEXTURE_NEAREST_LINEAR_MIPNEAREST;
  external static num get TEXTURE_NEAREST_LINEAR_MIPLINEAR;
  external static num get TEXTURE_NEAREST_LINEAR;
  external static num get TEXTURE_NEAREST_NEAREST;
  external static num get TEXTURE_LINEAR_NEAREST_MIPNEAREST;
  external static num get TEXTURE_LINEAR_NEAREST_MIPLINEAR;
  external static num get TEXTURE_LINEAR_LINEAR;
  external static num get TEXTURE_LINEAR_NEAREST;
  external static num get TEXTURE_EXPLICIT_MODE;
  external static num get TEXTURE_SPHERICAL_MODE;
  external static num get TEXTURE_PLANAR_MODE;
  external static num get TEXTURE_CUBIC_MODE;
  external static num get TEXTURE_PROJECTION_MODE;
  external static num get TEXTURE_SKYBOX_MODE;
  external static num get TEXTURE_INVCUBIC_MODE;
  external static num get TEXTURE_EQUIRECTANGULAR_MODE;
  external static num get TEXTURE_FIXED_EQUIRECTANGULAR_MODE;
  external static num get TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE;
  external static num get SCALEMODE_FLOOR;
  external static num get SCALEMODE_NEAREST;
  external static num get SCALEMODE_CEILING;
  external bool get enableOfflineSupport;
  external bool get disableManifestCheck;
  external List<Scene> get scenes;
  external Observable<Scene> get onNewSceneAddedObservable;
  external List<PostProcess> get postProcesses;
  external bool get isPointerLock;
  external Observable<Engine> get onResizeObservable;
  external Observable<Engine> get onCanvasBlurObservable;
  external Observable<Engine> get onCanvasFocusObservable;
  external Observable<PointerEvent> get onCanvasPointerOutObservable;
  external Observable<Engine> get onBeginFrameObservable;
  external ICustomAnimationFrameRequester get customAnimationFrameRequester;
  external Observable<Engine> get onEndFrameObservable;
  external Observable<Engine> get onBeforeShaderCompilationObservable;
  external Observable<Engine> get onAfterShaderCompilationObservable;
  external static IAudioEngine get audioEngine;
  external static IAudioEngine Function(HtmlElement hostElement) get AudioEngineFactory;
  external static IOfflineProvider Function(String urlToScene, dynamic Function(bool checked) callbackManifestChecked, bool disableManifestCheck) get OfflineProviderFactory;
  external num get canvasTabIndex;
  external bool get disablePerformanceMonitorInBackground;
  external set loadingScreen(ILoadingScreen loadingScreen);
  external set loadingUIText(String text);
  external set loadingUIBackgroundColor(String color);
  external set enableOfflineSupport(bool enableOfflineSupport);
  external set disableManifestCheck(bool disableManifestCheck);
  external set scenes(List<Scene> scenes);
  external set onNewSceneAddedObservable(Observable<Scene> onNewSceneAddedObservable);
  external set postProcesses(List<PostProcess> postProcesses);
  external set isPointerLock(bool isPointerLock);
  external set onResizeObservable(Observable<Engine> onResizeObservable);
  external set onCanvasBlurObservable(Observable<Engine> onCanvasBlurObservable);
  external set onCanvasFocusObservable(Observable<Engine> onCanvasFocusObservable);
  external set onCanvasPointerOutObservable(Observable<PointerEvent> onCanvasPointerOutObservable);
  external set onBeginFrameObservable(Observable<Engine> onBeginFrameObservable);
  external set customAnimationFrameRequester(ICustomAnimationFrameRequester customAnimationFrameRequester);
  external set onEndFrameObservable(Observable<Engine> onEndFrameObservable);
  external set onBeforeShaderCompilationObservable(Observable<Engine> onBeforeShaderCompilationObservable);
  external set onAfterShaderCompilationObservable(Observable<Engine> onAfterShaderCompilationObservable);
  external static set audioEngine(IAudioEngine audioEngine);
  external static set AudioEngineFactory(IAudioEngine Function(HtmlElement hostElement) AudioEngineFactory);
  external static set OfflineProviderFactory(IOfflineProvider Function(String urlToScene, dynamic Function(bool checked) callbackManifestChecked, bool disableManifestCheck) OfflineProviderFactory);
  external set canvasTabIndex(num canvasTabIndex);
  external set disablePerformanceMonitorInBackground(bool disablePerformanceMonitorInBackground);
  external static void MarkAllMaterialsAsDirty(num flag, [bool Function(Material mat) predicate]);
  external static ILoadingScreen DefaultLoadingScreenFactory(CanvasElement canvas);
  external HtmlElement getInputElement();
  external num getAspectRatio(IViewportOwnerLike viewportOwner, [bool useScreen]);
  external num getScreenAspectRatio();
  external Rectangle getRenderingCanvasClientRect();
  external Rectangle getInputElementClientRect();
  external bool isDeterministicLockStep();
  external num getLockstepMaxSteps();
  external num getTimeStep();
  external void generateMipMapsForCubemap(InternalTexture texture, [bool unbind]);
  external void setState(bool culling, [num zOffset, bool force, bool reverseSide]);
  external void setZOffset(num value);
  external num getZOffset();
  external void setDepthBuffer(bool enable);
  external bool getDepthWrite();
  external void setDepthWrite(bool enable);
  external bool getStencilBuffer();
  external void setStencilBuffer(bool enable);
  external num getStencilMask();
  external void setStencilMask(num mask);
  external num getStencilFunction();
  external num getStencilFunctionReference();
  external num getStencilFunctionMask();
  external void setStencilFunction(num stencilFunc);
  external void setStencilFunctionReference(num reference);
  external void setStencilFunctionMask(num mask);
  external num getStencilOperationFail();
  external num getStencilOperationDepthFail();
  external num getStencilOperationPass();
  external void setStencilOperationFail(num operation);
  external void setStencilOperationDepthFail(num operation);
  external void setStencilOperationPass(num operation);
  external void setDitheringState(bool value);
  external void setRasterizerState(bool value);
  external num getDepthFunction();
  external void setDepthFunction(num depthFunc);
  external void setDepthFunctionToGreater();
  external void setDepthFunctionToGreaterOrEqual();
  external void setDepthFunctionToLess();
  external void setDepthFunctionToLessOrEqual();
  external void cacheStencilState();
  external void restoreStencilState();
  external IViewportLike setDirectViewport(num x, num y, num width, num height);
  external void scissorClear(num x, num y, num width, num height, IColor4Like clearColor);
  external void enableScissor(num x, num y, num width, num height);
  external void disableScissor();
  external Observable<IDisplayChangedEventArgs> initWebVR();
  external void disableVR();
  external bool isVRPresenting();
  external String getVertexShaderSource(Program program);
  external String getFragmentShaderSource(Program program);
  external void setDepthStencilTexture(num channel, UniformLocation uniform, RenderTargetTexture texture);
  external void setTextureFromPostProcess(num channel, PostProcess postProcess);
  external void setTextureFromPostProcessOutput(num channel, PostProcess postProcess);
  external void switchFullscreen(bool requestPointerLock);
  external void enterFullscreen(bool requestPointerLock);
  external void exitFullscreen();
  external void enterPointerlock();
  external void exitPointerlock();
  external void beginFrame();
  external void endFrame();
  external void resize();
  external bool setSize(num width, num height);
  external Program createShaderProgram(IPipelineContext pipelineContext, String vertexCode, String fragmentCode, String defines, [RenderingContext context, List<String> transformFeedbackVaryings]);
  external num getFps();
  external num getDeltaTime();
  external num updateRenderTargetTextureSampleCount(InternalTexture texture, num samples);
  external void updateTextureComparisonFunction(InternalTexture texture, num comparisonFunction);
  external DataBuffer createInstancesBuffer(num capacity);
  external void deleteInstancesBuffer(Buffer buffer);
  external void dispose();
  external void displayLoadingUI();
  external void hideLoadingUI();
  external InternalTexture createMultiviewRenderTargetTexture(num width, num height);
  external void bindMultiviewFramebuffer(InternalTexture multiviewTexture);
  Observable<IDisplayChangedEventArgs> onVRDisplayChangedObservable;
  Observable<bool> onVRRequestPresentComplete;
  Observable<Engine> onVRRequestPresentStart;
  bool isInVRExclusivePointerMode;
  IVRPresentationAttributes vrPresentationAttributes;
  external bool isVRDevicePresent();
  external dynamic getVRDevice();
  external Promise<IDisplayChangedEventArgs> initWebVRAsync();
  external void enableVR(WebVROptions options);
  external Query createQuery();
  external Engine deleteQuery(Query query);
  external bool isQueryResultAvailable(Query query);
  external num getQueryResult(Query query);
  external Engine beginOcclusionQuery(num algorithmType, Query query);
  external Engine endOcclusionQuery(num algorithmType);
  external TransformFeedback createTransformFeedback();
  external void deleteTransformFeedback(TransformFeedback value);
  external void bindTransformFeedback(TransformFeedback value);
  external void beginTransformFeedback(bool usePoints);
  external void endTransformFeedback();
  external void setTranformFeedbackVaryings(Program program, List<String> value);
  external void bindTransformFeedbackBuffer(DataBuffer value);
  HtmlElement inputElement;
  EngineView activeView;
  List<EngineView> views;
  external EngineView registerView(CanvasElement canvas, [Camera camera]);
  external Engine unRegisterView(CanvasElement canvas);
  List<String> texturesSupported;
  String textureFormatInUse;
  external void setCompressedTextureExclusions(List<String> skippedFiles);
  external String setTextureFormatToUse(List<String> formatsAvailable);
  external Effect createEffectForParticles(String fragmentName, List<String> uniformsNames, List<String> samplers, String defines, [EffectFallbacks fallbacks, void Function(Effect effect) onCompiled, void Function(Effect effect, String errors) onError, IParticleSystem particleSystem]);
}
