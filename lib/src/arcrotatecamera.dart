part of babylon;

@JS()
class ArcRotateCamera extends TargetCamera {
  external ArcRotateCamera(String name, num alpha, num beta, num radius, Vector3 target, Scene scene, [bool setActiveOnSceneIfNoneActive]);
  num alpha;
  num beta;
  num radius;
  num inertialAlphaOffset;
  num inertialBetaOffset;
  num inertialRadiusOffset;
  num lowerAlphaLimit;
  num upperAlphaLimit;
  num lowerBetaLimit;
  num upperBetaLimit;
  num lowerRadiusLimit;
  num upperRadiusLimit;
  num inertialPanningX;
  num inertialPanningY;
  num pinchToPanMaxDistance;
  num panningDistanceLimit;
  Vector3 panningOriginTarget;
  num panningInertia;
  num zoomOnFactor;
  Vector2 targetScreenOffset;
  bool allowUpsideDown;
  bool useInputToRestoreState;
  Vector3 panningAxis;
  void Function(AbstractMesh collidedMesh) onCollide;
  bool checkCollisions;
  Vector3 collisionRadius;
  external Vector3 get target;
  external Vector3 get position;
  external Vector3 get upVector;
  external num get angularSensibilityX;
  external num get angularSensibilityY;
  external num get pinchPrecision;
  external num get pinchDeltaPercentage;
  external bool get useNaturalPinchZoom;
  external num get panningSensibility;
  external List<num> get keysUp;
  external List<num> get keysDown;
  external List<num> get keysLeft;
  external List<num> get keysRight;
  external num get wheelPrecision;
  external num get wheelDeltaPercentage;
  external BouncingBehavior get bouncingBehavior;
  external bool get useBouncingBehavior;
  external FramingBehavior get framingBehavior;
  external bool get useFramingBehavior;
  external AutoRotationBehavior get autoRotationBehavior;
  external bool get useAutoRotationBehavior;
  external set target(Vector3 value);
  external set position(Vector3 newPosition);
  external set upVector(Vector3 vec);
  external set angularSensibilityX(num value);
  external set angularSensibilityY(num value);
  external set pinchPrecision(num value);
  external set pinchDeltaPercentage(num value);
  external set useNaturalPinchZoom(bool value);
  external set panningSensibility(num value);
  external set keysUp(List<num> value);
  external set keysDown(List<num> value);
  external set keysLeft(List<num> value);
  external set keysRight(List<num> value);
  external set wheelPrecision(num value);
  external set wheelDeltaPercentage(num value);
  external set useBouncingBehavior(bool value);
  external set useFramingBehavior(bool value);
  external set useAutoRotationBehavior(bool value);
  external void setMatUp();
  external Camera storeState();
  external void attachControl(HtmlElement element, [bool noPreventDefault, bool useCtrlForPanning, num panningMouseButton]);
  external void detachControl(HtmlElement element);
  external void rebuildAnglesAndRadius();
  external void setPosition(Vector3 position);
  external void zoomOn([List<AbstractMesh> meshes, bool doNotUpdateMaxZ]);
  external Camera createRigCamera(String name, num cameraIndex);
  external void dispose();
  external String getClassName();
}

