part of babylon;

/// class ArcRotateCamera
@JS()
class ArcRotateCamera extends TargetCamera {
  external ArcRotateCamera(String name, num alpha, num beta, num radius, Vector3 target, Scene scene, [bool setActiveOnSceneIfNoneActive]);
  external Vector3 get target;
  external Vector3 get position;
  external Vector3 get upVector;
  external num get angularSensibilityX;
  external num get angularSensibilityY;
  external num get pinchPrecision;
  external num get pinchDeltaPercentage;
  external bool get useNaturalPinchZoom;
  external num get panningSensibility;
  external List<num> get keysUp;
  external List<num> get keysDown;
  external List<num> get keysLeft;
  external List<num> get keysRight;
  external num get wheelPrecision;
  external num get wheelDeltaPercentage;
  external BouncingBehavior get bouncingBehavior;
  external bool get useBouncingBehavior;
  external FramingBehavior get framingBehavior;
  external bool get useFramingBehavior;
  external AutoRotationBehavior get autoRotationBehavior;
  external bool get useAutoRotationBehavior;
  external num get alpha;
  external num get beta;
  external num get radius;
  external num get inertialAlphaOffset;
  external num get inertialBetaOffset;
  external num get inertialRadiusOffset;
  external num get lowerAlphaLimit;
  external num get upperAlphaLimit;
  external num get lowerBetaLimit;
  external num get upperBetaLimit;
  external num get lowerRadiusLimit;
  external num get upperRadiusLimit;
  external num get inertialPanningX;
  external num get inertialPanningY;
  external num get pinchToPanMaxDistance;
  external num get panningDistanceLimit;
  external Vector3 get panningOriginTarget;
  external num get panningInertia;
  external num get zoomOnFactor;
  external Vector2 get targetScreenOffset;
  external bool get allowUpsideDown;
  external bool get useInputToRestoreState;
  external Vector3 get panningAxis;
  external Observable<AbstractMesh> get onMeshTargetChangedObservable;
  external void Function(AbstractMesh collidedMesh) get onCollide;
  external bool get checkCollisions;
  external Vector3 get collisionRadius;
  external set target(Vector3 value);
  external set position(Vector3 newPosition);
  external set upVector(Vector3 vec);
  external set angularSensibilityX(num value);
  external set angularSensibilityY(num value);
  external set pinchPrecision(num value);
  external set pinchDeltaPercentage(num value);
  external set useNaturalPinchZoom(bool value);
  external set panningSensibility(num value);
  external set keysUp(List<num> value);
  external set keysDown(List<num> value);
  external set keysLeft(List<num> value);
  external set keysRight(List<num> value);
  external set wheelPrecision(num value);
  external set wheelDeltaPercentage(num value);
  external set useBouncingBehavior(bool value);
  external set useFramingBehavior(bool value);
  external set useAutoRotationBehavior(bool value);
  external set alpha(num alpha);
  external set beta(num beta);
  external set radius(num radius);
  external set inertialAlphaOffset(num inertialAlphaOffset);
  external set inertialBetaOffset(num inertialBetaOffset);
  external set inertialRadiusOffset(num inertialRadiusOffset);
  external set lowerAlphaLimit(num lowerAlphaLimit);
  external set upperAlphaLimit(num upperAlphaLimit);
  external set lowerBetaLimit(num lowerBetaLimit);
  external set upperBetaLimit(num upperBetaLimit);
  external set lowerRadiusLimit(num lowerRadiusLimit);
  external set upperRadiusLimit(num upperRadiusLimit);
  external set inertialPanningX(num inertialPanningX);
  external set inertialPanningY(num inertialPanningY);
  external set pinchToPanMaxDistance(num pinchToPanMaxDistance);
  external set panningDistanceLimit(num panningDistanceLimit);
  external set panningOriginTarget(Vector3 panningOriginTarget);
  external set panningInertia(num panningInertia);
  external set zoomOnFactor(num zoomOnFactor);
  external set targetScreenOffset(Vector2 targetScreenOffset);
  external set allowUpsideDown(bool allowUpsideDown);
  external set useInputToRestoreState(bool useInputToRestoreState);
  external set panningAxis(Vector3 panningAxis);
  external set onMeshTargetChangedObservable(Observable<AbstractMesh> onMeshTargetChangedObservable);
  external set onCollide(void Function(AbstractMesh collidedMesh) onCollide);
  external set checkCollisions(bool checkCollisions);
  external set collisionRadius(Vector3 collisionRadius);
  external void setMatUp();
  external Camera storeState();
  external void attachControl(HtmlElement element, [bool noPreventDefault]);
  external void detachControl(HtmlElement element);
  external void rebuildAnglesAndRadius();
  external void setPosition(Vector3 position);
  external void zoomOn([List<AbstractMesh> meshes, bool doNotUpdateMaxZ]);
  external Camera createRigCamera(String name, num cameraIndex);
  external void dispose([bool doNotRecurse, bool disposeMaterialAndTextures]);
  external String getClassName();
}
