part of babylon_dart;

/// class Vector3
@JS()
class Vector3 {
  // properties
  // methods
  external String toString();
  external String getClassName();
  external num getHashCode();
  external List<num> asArray();
  external Vector3 toArray(FloatArray array, [num index]);
  external Vector3 fromArray(FloatArray array, [num index]);
  external Quaternion toQuaternion();
  external Vector3 addInPlace(DeepImmutable<Vector3> otherVector);
  external Vector3 addInPlaceFromFloats(num x, num y, num z);
  external Vector3 add(DeepImmutable<Vector3> otherVector);
  external Vector3 addToRef(DeepImmutable<Vector3> otherVector, Vector3 result);
  external Vector3 subtractInPlace(DeepImmutable<Vector3> otherVector);
  external Vector3 subtract(DeepImmutable<Vector3> otherVector);
  external Vector3 subtractToRef(DeepImmutable<Vector3> otherVector, Vector3 result);
  external Vector3 subtractFromFloats(num x, num y, num z);
  external Vector3 subtractFromFloatsToRef(num x, num y, num z, Vector3 result);
  external Vector3 negate();
  external Vector3 negateInPlace();
  external Vector3 negateToRef(Vector3 result);
  external Vector3 scaleInPlace(num scale);
  external Vector3 scale(num scale);
  external Vector3 scaleToRef(num scale, Vector3 result);
  external Vector3 scaleAndAddToRef(num scale, Vector3 result);
  external Vector3 projectOnPlane(Plane plane, Vector3 origin);
  external void projectOnPlaneToRef(Plane plane, Vector3 origin, Vector3 result);
  external bool equals(DeepImmutable<Vector3> otherVector);
  external bool equalsWithEpsilon(DeepImmutable<Vector3> otherVector, [num epsilon]);
  external bool equalsToFloats(num x, num y, num z);
  external Vector3 multiplyInPlace(DeepImmutable<Vector3> otherVector);
  external Vector3 multiply(DeepImmutable<Vector3> otherVector);
  external Vector3 multiplyToRef(DeepImmutable<Vector3> otherVector, Vector3 result);
  external Vector3 multiplyByFloats(num x, num y, num z);
  external Vector3 divide(DeepImmutable<Vector3> otherVector);
  external Vector3 divideToRef(DeepImmutable<Vector3> otherVector, Vector3 result);
  external Vector3 divideInPlace(Vector3 otherVector);
  external Vector3 minimizeInPlace(DeepImmutable<Vector3> other);
  external Vector3 maximizeInPlace(DeepImmutable<Vector3> other);
  external Vector3 minimizeInPlaceFromFloats(num x, num y, num z);
  external Vector3 maximizeInPlaceFromFloats(num x, num y, num z);
  external bool isNonUniformWithinEpsilon(num epsilon);
  external Vector3 floor();
  external Vector3 fract();
  external num length();
  external num lengthSquared();
  external Vector3 normalize();
  external THIS reorderInPlace<THIS extends Vector3>(String order);
  external Vector3 rotateByQuaternionToRef(Quaternion quaternion, Vector3 result);
  external Vector3 rotateByQuaternionAroundPointToRef(Quaternion quaternion, Vector3 point, Vector3 result);
  external Vector3 cross(Vector3 other);
  external Vector3 normalizeFromLength(num len);
  external Vector3 normalizeToNew();
  external Vector3 normalizeToRef(Vector3 reference);
  external Vector3 clone();
  external Vector3 copyFrom(DeepImmutable<Vector3> source);
  external Vector3 copyFromFloats(num x, num y, num z);
  external Vector3 set(num x, num y, num z);
  external Vector3 setAll(num v);
  external static num GetClipFactor(DeepImmutable<Vector3> vector0, DeepImmutable<Vector3> vector1, DeepImmutable<Vector3> axis, num size);
  external static num GetAngleBetweenVectors(DeepImmutable<Vector3> vector0, DeepImmutable<Vector3> vector1, DeepImmutable<Vector3> normal);
  external static num GetAngleBetweenVectorsOnPlane(Vector3 vector0, Vector3 vector1, Vector3 normal);
  external static void SlerpToRef(Vector3 vector0, Vector3 vector1, num slerp, Vector3 result);
  external static void SmoothToRef(Vector3 source, Vector3 goal, num deltaTime, num lerpTime, Vector3 result);
  external static Vector3 FromArray(DeepImmutable<ArrayLike<num>> array, [num offset]);
  external static Vector3 FromFloatArray(DeepImmutable<Float32Array> array, [num offset]);
  external static void FromArrayToRef(DeepImmutable<ArrayLike<num>> array, num offset, Vector3 result);
  external static void FromFloatArrayToRef(DeepImmutable<Float32Array> array, num offset, Vector3 result);
  external static void FromFloatsToRef(num x, num y, num z, Vector3 result);
  external static Vector3 Zero();
  external static Vector3 One();
  external static Vector3 Up();
  external static Vector3 Down();
  external static Vector3 Forward([bool rightHandedSystem]);
  external static Vector3 Backward([bool rightHandedSystem]);
  external static Vector3 Right();
  external static Vector3 Left();
  external static Vector3 TransformCoordinates(DeepImmutable<Vector3> vector, DeepImmutable<Matrix> transformation);
  external static void TransformCoordinatesToRef(DeepImmutable<Vector3> vector, DeepImmutable<Matrix> transformation, Vector3 result);
  external static void TransformCoordinatesFromFloatsToRef(num x, num y, num z, DeepImmutable<Matrix> transformation, Vector3 result);
  external static Vector3 TransformNormal(DeepImmutable<Vector3> vector, DeepImmutable<Matrix> transformation);
  external static void TransformNormalToRef(DeepImmutable<Vector3> vector, DeepImmutable<Matrix> transformation, Vector3 result);
  external static void TransformNormalFromFloatsToRef(num x, num y, num z, DeepImmutable<Matrix> transformation, Vector3 result);
  external static Vector3 CatmullRom(DeepImmutable<Vector3> value1, DeepImmutable<Vector3> value2, DeepImmutable<Vector3> value3, DeepImmutable<Vector3> value4, num amount);
  external static Vector3 Clamp(DeepImmutable<Vector3> value, DeepImmutable<Vector3> min, DeepImmutable<Vector3> max);
  external static void ClampToRef(DeepImmutable<Vector3> value, DeepImmutable<Vector3> min, DeepImmutable<Vector3> max, Vector3 result);
  external static void CheckExtends(Vector3 v, Vector3 min, Vector3 max);
  external static Vector3 Hermite(DeepImmutable<Vector3> value1, DeepImmutable<Vector3> tangent1, DeepImmutable<Vector3> value2, DeepImmutable<Vector3> tangent2, num amount);
  external static Vector3 Hermite1stDerivative(DeepImmutable<Vector3> value1, DeepImmutable<Vector3> tangent1, DeepImmutable<Vector3> value2, DeepImmutable<Vector3> tangent2, num time);
  external static void Hermite1stDerivativeToRef(DeepImmutable<Vector3> value1, DeepImmutable<Vector3> tangent1, DeepImmutable<Vector3> value2, DeepImmutable<Vector3> tangent2, num time, Vector3 result);
  external static Vector3 Lerp(DeepImmutable<Vector3> start, DeepImmutable<Vector3> end, num amount);
  external static void LerpToRef(DeepImmutable<Vector3> start, DeepImmutable<Vector3> end, num amount, Vector3 result);
  external static num Dot(DeepImmutable<Vector3> left, DeepImmutable<Vector3> right);
  external static Vector3 Cross(DeepImmutable<Vector3> left, DeepImmutable<Vector3> right);
  external static void CrossToRef(DeepImmutable<Vector3> left, DeepImmutable<Vector3> right, Vector3 result);
  external static Vector3 Normalize(DeepImmutable<Vector3> vector);
  external static void NormalizeToRef(DeepImmutable<Vector3> vector, Vector3 result);
  external static Vector3 Project(DeepImmutable<Vector3> vector, DeepImmutable<Matrix> world, DeepImmutable<Matrix> transform, DeepImmutable<Viewport> viewport);
  external static Vector3 ProjectToRef(DeepImmutable<Vector3> vector, DeepImmutable<Matrix> world, DeepImmutable<Matrix> transform, DeepImmutable<Viewport> viewport, DeepImmutable<Vector3> result);
  external static Vector3 UnprojectFromTransform(Vector3 source, num viewportWidth, num viewportHeight, DeepImmutable<Matrix> world, DeepImmutable<Matrix> transform);
  external static Vector3 Unproject(DeepImmutable<Vector3> source, num viewportWidth, num viewportHeight, DeepImmutable<Matrix> world, DeepImmutable<Matrix> view, DeepImmutable<Matrix> projection);
  external static void UnprojectToRef(DeepImmutable<Vector3> source, num viewportWidth, num viewportHeight, DeepImmutable<Matrix> world, DeepImmutable<Matrix> view, DeepImmutable<Matrix> projection, Vector3 result);
  external static void UnprojectFloatsToRef(float sourceX, float sourceY, float sourceZ, num viewportWidth, num viewportHeight, DeepImmutable<Matrix> world, DeepImmutable<Matrix> view, DeepImmutable<Matrix> projection, Vector3 result);
  external static Vector3 Minimize(DeepImmutable<Vector3> left, DeepImmutable<Vector3> right);
  external static Vector3 Maximize(DeepImmutable<Vector3> left, DeepImmutable<Vector3> right);
  external static num Distance(DeepImmutable<Vector3> value1, DeepImmutable<Vector3> value2);
  external static num DistanceSquared(DeepImmutable<Vector3> value1, DeepImmutable<Vector3> value2);
  external static num ProjectOnTriangleToRef(DeepImmutable<Vector3> vector, DeepImmutable<Vector3> p0, DeepImmutable<Vector3> p1, DeepImmutable<Vector3> p2, Vector3 ref);
  external static Vector3 Center(DeepImmutable<Vector3> value1, DeepImmutable<Vector3> value2);
  external static Vector3 CenterToRef(DeepImmutable<Vector3> value1, DeepImmutable<Vector3> value2, DeepImmutable<Vector3> ref);
  external static Vector3 RotationFromAxis(DeepImmutable<Vector3> axis1, DeepImmutable<Vector3> axis2, DeepImmutable<Vector3> axis3);
  external static void RotationFromAxisToRef(DeepImmutable<Vector3> axis1, DeepImmutable<Vector3> axis2, DeepImmutable<Vector3> axis3, Vector3 ref);
}
