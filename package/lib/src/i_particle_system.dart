part of babylon_dart;

/// interface IParticleSystem
@JS()
abstract class IParticleSystem {
  // properties
  external List<Animation> animations;
  external String id;
  external String name;
  external Object? emitter;
  external bool isBillboardBased;
  external num renderingGroupId;
  external num layerMask;
  external num updateSpeed;
  external num targetStopDuration;
  external BaseTexture? particleTexture;
  external num blendMode;
  external num minLifeTime;
  external num maxLifeTime;
  external num minSize;
  external num maxSize;
  external num minScaleX;
  external num maxScaleX;
  external num minScaleY;
  external num maxScaleY;
  external Color4 color1;
  external Color4 color2;
  external Color4 colorDead;
  external num emitRate;
  external Vector3 gravity;
  external num minEmitPower;
  external num maxEmitPower;
  external num minAngularSpeed;
  external num maxAngularSpeed;
  external num minInitialRotation;
  external num maxInitialRotation;
  external IParticleEmitterType? particleEmitterType;
  external num startDelay;
  external num preWarmCycles;
  external num preWarmStepOffset;
  external num spriteCellChangeSpeed;
  external num startSpriteCellID;
  external num endSpriteCellID;
  external bool spriteCellLoop;
  external num spriteCellWidth;
  external num spriteCellHeight;
  external bool spriteRandomStartCell;
  external bool isAnimationSheetEnabled;
  external Vector2 translationPivot;
  external BaseTexture? noiseTexture;
  external Vector3 noiseStrength;
  external num billboardMode;
  external num limitVelocityDamping;
  external bool beginAnimationOnStart;
  external num beginAnimationFrom;
  external num beginAnimationTo;
  external bool beginAnimationLoop;
  external bool disposeOnStop;
  external num manualEmitCount;
  external bool isLocal;
  external String snippetId;
  external Matrix defaultProjectionMatrix;
  external Observable<IParticleSystem> onDisposeObservable;
  external Observable<IParticleSystem> onStoppedObservable;
  external Observable<Effect?> onBeforeDrawParticlesObservable;
  external String vertexShaderName;
  external bool useRampGradients;
  // methods
  num getCapacity();
  num getActiveCount();
  bool isStarted();
  void animate();
  num render();
  void dispose([bool disposeTexture]);
  IParticleSystem? clone(String name, Object newEmitter);
  Object serialize(bool serializeTexture);
  void rebuild();
  void forceRefreshGradients();
  void start([num delay]);
  void stop();
  void reset();
  bool isStopping();
  bool isReady();
  String getClassName();
  Effect? getCustomEffect(num blendMode);
  void setCustomEffect(Effect? effect, num blendMode);
  void fillDefines(List<String> defines, num blendMode);
  void fillUniformsAttributesAndSamplerNames(List<String> uniforms, List<String> attributes, List<String> samplers);
  IParticleSystem addColorGradient(num gradient, Color4 color1, [Color4 color2]);
  IParticleSystem removeColorGradient(num gradient);
  IParticleSystem addSizeGradient(num gradient, num factor, [num factor2]);
  IParticleSystem removeSizeGradient(num gradient);
  List<ColorGradient>? getColorGradients();
  List<FactorGradient>? getSizeGradients();
  List<FactorGradient>? getAngularSpeedGradients();
  IParticleSystem addAngularSpeedGradient(num gradient, num factor, [num factor2]);
  IParticleSystem removeAngularSpeedGradient(num gradient);
  List<FactorGradient>? getVelocityGradients();
  IParticleSystem addVelocityGradient(num gradient, num factor, [num factor2]);
  IParticleSystem removeVelocityGradient(num gradient);
  List<FactorGradient>? getLimitVelocityGradients();
  IParticleSystem addLimitVelocityGradient(num gradient, num factor, [num factor2]);
  IParticleSystem removeLimitVelocityGradient(num gradient);
  IParticleSystem addDragGradient(num gradient, num factor, [num factor2]);
  IParticleSystem removeDragGradient(num gradient);
  List<FactorGradient>? getDragGradients();
  IParticleSystem addEmitRateGradient(num gradient, num factor, [num factor2]);
  IParticleSystem removeEmitRateGradient(num gradient);
  List<FactorGradient>? getEmitRateGradients();
  IParticleSystem addStartSizeGradient(num gradient, num factor, [num factor2]);
  IParticleSystem removeStartSizeGradient(num gradient);
  List<FactorGradient>? getStartSizeGradients();
  IParticleSystem addLifeTimeGradient(num gradient, num factor, [num factor2]);
  IParticleSystem removeLifeTimeGradient(num gradient);
  List<FactorGradient>? getLifeTimeGradients();
  List<ColorGradient>? getColorGradients();
  IParticleSystem addRampGradient(num gradient, Color3 color);
  List<Color3Gradient>? getRampGradients();
  IParticleSystem addColorRemapGradient(num gradient, num min, num max);
  List<FactorGradient>? getColorRemapGradients();
  IParticleSystem addAlphaRemapGradient(num gradient, num min, num max);
  List<FactorGradient>? getAlphaRemapGradients();
  PointParticleEmitter createPointEmitter(Vector3 direction1, Vector3 direction2);
  HemisphericParticleEmitter createHemisphericEmitter(num radius, num radiusRange);
  SphereParticleEmitter createSphereEmitter(num radius, num radiusRange);
  SphereDirectedParticleEmitter createDirectedSphereEmitter(num radius, Vector3 direction1, Vector3 direction2);
  CylinderParticleEmitter createCylinderEmitter(num radius, num height, num radiusRange, num directionRandomizer);
  SphereDirectedParticleEmitter createDirectedCylinderEmitter(num radius, num height, num radiusRange, Vector3 direction1, Vector3 direction2);
  ConeParticleEmitter createConeEmitter(num radius, num angle);
  BoxParticleEmitter createBoxEmitter(Vector3 direction1, Vector3 direction2, Vector3 minEmitBox, Vector3 maxEmitBox);
  Scene? getScene();
}
