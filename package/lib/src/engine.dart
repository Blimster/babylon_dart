part of babylon_dart;

/// class Engine
@JS()
class Engine extends ThinEngine {
  // properties
  external static final Object ALPHA_DISABLE;
  external static final Object ALPHA_ADD;
  external static final Object ALPHA_COMBINE;
  external static final Object ALPHA_SUBTRACT;
  external static final Object ALPHA_MULTIPLY;
  external static final Object ALPHA_MAXIMIZED;
  external static final Object ALPHA_ONEONE;
  external static final Object ALPHA_PREMULTIPLIED;
  external static final Object ALPHA_PREMULTIPLIED_PORTERDUFF;
  external static final Object ALPHA_INTERPOLATE;
  external static final Object ALPHA_SCREENMODE;
  external static final Object DELAYLOADSTATE_NONE;
  external static final Object DELAYLOADSTATE_LOADED;
  external static final Object DELAYLOADSTATE_LOADING;
  external static final Object DELAYLOADSTATE_NOTLOADED;
  external static final Object NEVER;
  external static final Object ALWAYS;
  external static final Object LESS;
  external static final Object EQUAL;
  external static final Object LEQUAL;
  external static final Object GREATER;
  external static final Object GEQUAL;
  external static final Object NOTEQUAL;
  external static final Object KEEP;
  external static final Object REPLACE;
  external static final Object INCR;
  external static final Object DECR;
  external static final Object INVERT;
  external static final Object INCR_WRAP;
  external static final Object DECR_WRAP;
  external static final Object TEXTURE_CLAMP_ADDRESSMODE;
  external static final Object TEXTURE_WRAP_ADDRESSMODE;
  external static final Object TEXTURE_MIRROR_ADDRESSMODE;
  external static final Object TEXTUREFORMAT_ALPHA;
  external static final Object TEXTUREFORMAT_LUMINANCE;
  external static final Object TEXTUREFORMAT_LUMINANCE_ALPHA;
  external static final Object TEXTUREFORMAT_RGB;
  external static final Object TEXTUREFORMAT_RGBA;
  external static final Object TEXTUREFORMAT_RED;
  external static final Object TEXTUREFORMAT_R;
  external static final Object TEXTUREFORMAT_RG;
  external static final Object TEXTUREFORMAT_RED_INTEGER;
  external static final Object TEXTUREFORMAT_R_INTEGER;
  external static final Object TEXTUREFORMAT_RG_INTEGER;
  external static final Object TEXTUREFORMAT_RGB_INTEGER;
  external static final Object TEXTUREFORMAT_RGBA_INTEGER;
  external static final Object TEXTURETYPE_UNSIGNED_BYTE;
  external static final Object TEXTURETYPE_UNSIGNED_INT;
  external static final Object TEXTURETYPE_FLOAT;
  external static final Object TEXTURETYPE_HALF_FLOAT;
  external static final Object TEXTURETYPE_BYTE;
  external static final Object TEXTURETYPE_SHORT;
  external static final Object TEXTURETYPE_UNSIGNED_SHORT;
  external static final Object TEXTURETYPE_INT;
  external static final Object TEXTURETYPE_UNSIGNED_INTEGER;
  external static final Object TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4;
  external static final Object TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1;
  external static final Object TEXTURETYPE_UNSIGNED_SHORT_5_6_5;
  external static final Object TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV;
  external static final Object TEXTURETYPE_UNSIGNED_INT_24_8;
  external static final Object TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;
  external static final Object TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV;
  external static final Object TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV;
  external static final Object TEXTURE_NEAREST_SAMPLINGMODE;
  external static final Object TEXTURE_BILINEAR_SAMPLINGMODE;
  external static final Object TEXTURE_TRILINEAR_SAMPLINGMODE;
  external static final Object TEXTURE_NEAREST_NEAREST_MIPLINEAR;
  external static final Object TEXTURE_LINEAR_LINEAR_MIPNEAREST;
  external static final Object TEXTURE_LINEAR_LINEAR_MIPLINEAR;
  external static final Object TEXTURE_NEAREST_NEAREST_MIPNEAREST;
  external static final Object TEXTURE_NEAREST_LINEAR_MIPNEAREST;
  external static final Object TEXTURE_NEAREST_LINEAR_MIPLINEAR;
  external static final Object TEXTURE_NEAREST_LINEAR;
  external static final Object TEXTURE_NEAREST_NEAREST;
  external static final Object TEXTURE_LINEAR_NEAREST_MIPNEAREST;
  external static final Object TEXTURE_LINEAR_NEAREST_MIPLINEAR;
  external static final Object TEXTURE_LINEAR_LINEAR;
  external static final Object TEXTURE_LINEAR_NEAREST;
  external static final Object TEXTURE_EXPLICIT_MODE;
  external static final Object TEXTURE_SPHERICAL_MODE;
  external static final Object TEXTURE_PLANAR_MODE;
  external static final Object TEXTURE_CUBIC_MODE;
  external static final Object TEXTURE_PROJECTION_MODE;
  external static final Object TEXTURE_SKYBOX_MODE;
  external static final Object TEXTURE_INVCUBIC_MODE;
  external static final Object TEXTURE_EQUIRECTANGULAR_MODE;
  external static final Object TEXTURE_FIXED_EQUIRECTANGULAR_MODE;
  external static final Object TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE;
  external static final Object SCALEMODE_FLOOR;
  external static final Object SCALEMODE_NEAREST;
  external static final Object SCALEMODE_CEILING;
  external bool enableOfflineSupport;
  external bool disableManifestCheck;
  external bool disableContextMenu;
  external List<Scene> scenes;
  external Observable<Scene> onNewSceneAddedObservable;
  external List<PostProcess> postProcesses;
  external bool isPointerLock;
  external Observable<Engine> onResizeObservable;
  external Observable<Engine> onCanvasBlurObservable;
  external Observable<Engine> onCanvasFocusObservable;
  external Observable<PointerEvent> onCanvasPointerOutObservable;
  external Observable<Engine> onBeginFrameObservable;
  external ICustomAnimationFrameRequester? customAnimationFrameRequester;
  external Observable<Engine> onEndFrameObservable;
  external Observable<Engine> onBeforeShaderCompilationObservable;
  external Observable<Engine> onAfterShaderCompilationObservable;
  external IAudioEngine? audioEngine;
  external IAudioEngine Function(HtmlElement? hostElement, AudioContext? audioContext, Object? audioDestination) AudioEngineFactory;
  external IOfflineProvider Function(String urlToScene, Object Function(bool checked) callbackManifestChecked, bool disableManifestCheck) OfflineProviderFactory;
  external num canvasTabIndex;
  external bool disablePerformanceMonitorInBackground;
  external num currentRenderPassId;
  // methods
  external Promise<ImageBitmap> createImageBitmap(Object image, [ImageBitmapOptions options]);
  external Uint8List resizeImageBitmap(Object image, num bufferWidth, num bufferHeight);
  external static void MarkAllMaterialsAsDirty(num flag, [bool Function(Material mat) predicate]);
  external static ILoadingScreen DefaultLoadingScreenFactory(CanvasElement canvas);
  external HtmlElement? getInputElement();
  external num getAspectRatio(IViewportOwnerLike viewportOwner, [bool useScreen]);
  external num getScreenAspectRatio();
  external Rectangle<num>? getRenderingCanvasClientRect();
  external Rectangle<num>? getInputElementClientRect();
  external bool isDeterministicLockStep();
  external num getLockstepMaxSteps();
  external num getTimeStep();
  external void generateMipMapsForCubemap(InternalTexture texture, [bool unbind]);
  external bool getDepthWrite();
  external void setDepthWrite(bool enable);
  external bool getStencilBuffer();
  external void setStencilBuffer(bool enable);
  external num getStencilMask();
  external void setStencilMask(num mask);
  external num getStencilFunction();
  external num getStencilFunctionReference();
  external num getStencilFunctionMask();
  external void setStencilFunction(num stencilFunc);
  external void setStencilFunctionReference(num reference);
  external void setStencilFunctionMask(num mask);
  external num getStencilOperationFail();
  external num getStencilOperationDepthFail();
  external num getStencilOperationPass();
  external void setStencilOperationFail(num operation);
  external void setStencilOperationDepthFail(num operation);
  external void setStencilOperationPass(num operation);
  external void setDitheringState(bool value);
  external void setRasterizerState(bool value);
  external num? getDepthFunction();
  external void setDepthFunction(num depthFunc);
  external void setDepthFunctionToGreater();
  external void setDepthFunctionToGreaterOrEqual();
  external void setDepthFunctionToLess();
  external void setDepthFunctionToLessOrEqual();
  external void cacheStencilState();
  external void restoreStencilState();
  external IViewportLike? setDirectViewport(num x, num y, num width, num height);
  external void scissorClear(num x, num y, num width, num height, IColor4Like clearColor);
  external void enableScissor(num x, num y, num width, num height);
  external void disableScissor();
  external Observable<IDisplayChangedEventArgs> initWebVR();
  external void disableVR();
  external bool isVRPresenting();
  external String? getVertexShaderSource(Program program);
  external String? getFragmentShaderSource(Program program);
  external void setDepthStencilTexture(num channel, UniformLocation? uniform, RenderTargetTexture? texture, [String name]);
  external void setTextureFromPostProcess(num channel, PostProcess? postProcess, String name);
  external void setTextureFromPostProcessOutput(num channel, PostProcess? postProcess, String name);
  external void switchFullscreen(bool requestPointerLock);
  external void enterFullscreen(bool requestPointerLock);
  external void exitFullscreen();
  external void enterPointerlock();
  external void exitPointerlock();
  external void beginFrame();
  external void endFrame();
  external void resize([bool forceSetSize]);
  external bool setSize(num width, num height, [bool forceSetSize]);
  external Program createShaderProgram(IPipelineContext pipelineContext, String vertexCode, String fragmentCode, String? defines, [RenderingContext context, List<String>? transformFeedbackVaryings]);
  external List<String> getRenderPassNames();
  external String getCurrentRenderPassName();
  external num createRenderPassId([String name]);
  external void releaseRenderPassId(num id);
  external num getFps();
  external num getDeltaTime();
  external InternalTexture wrapWebGLTexture(Texture texture);
  external void updateTextureComparisonFunction(InternalTexture texture, num comparisonFunction);
  external DataBuffer createInstancesBuffer(num capacity);
  external void deleteInstancesBuffer(Buffer buffer);
  external void dispose();
  external void displayLoadingUI();
  external void hideLoadingUI();
  external Object createVideoElement(Map<String, Object> constraints);
  external EngineGetFontOffset getFontOffset(String font);
}

@JS()
@anonymous
class EngineGetFontOffset {
}
