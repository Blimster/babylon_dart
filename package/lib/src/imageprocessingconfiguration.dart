part of babylon;

/// class ImageProcessingConfiguration
@JS()
class ImageProcessingConfiguration {
  external bool get colorCurvesEnabled;
  external BaseTexture get colorGradingTexture;
  external bool get colorGradingEnabled;
  external bool get colorGradingWithGreenDepth;
  external bool get colorGradingBGR;
  external num get exposure;
  external bool get toneMappingEnabled;
  external num get toneMappingType;
  external num get contrast;
  external num get vignetteBlendMode;
  external bool get vignetteEnabled;
  external bool get applyByPostProcess;
  external bool get isEnabled;
  external num get VIGNETTEMODE_MULTIPLY;
  external num get VIGNETTEMODE_OPAQUE;
  external static num get TONEMAPPING_STANDARD;
  external static num get TONEMAPPING_ACES;
  external ColorCurves get colorCurves;
  external num get vignetteStretch;
  external num get vignetteCentreX;
  external num get vignetteCentreY;
  external num get vignetteWeight;
  external Color4 get vignetteColor;
  external num get vignetteCameraFov;
  external Observable<ImageProcessingConfiguration> get onUpdateParameters;
  external set colorCurvesEnabled(bool value);
  external set colorGradingTexture(BaseTexture value);
  external set colorGradingEnabled(bool value);
  external set colorGradingWithGreenDepth(bool value);
  external set colorGradingBGR(bool value);
  external set exposure(num value);
  external set toneMappingEnabled(bool value);
  external set toneMappingType(num value);
  external set contrast(num value);
  external set vignetteBlendMode(num value);
  external set vignetteEnabled(bool value);
  external set applyByPostProcess(bool value);
  external set isEnabled(bool value);
  external set colorCurves(ColorCurves colorCurves);
  external set vignetteStretch(num vignetteStretch);
  external set vignetteCentreX(num vignetteCentreX);
  external set vignetteCentreY(num vignetteCentreY);
  external set vignetteWeight(num vignetteWeight);
  external set vignetteColor(Color4 vignetteColor);
  external set vignetteCameraFov(num vignetteCameraFov);
  external set onUpdateParameters(Observable<ImageProcessingConfiguration> onUpdateParameters);
  external String getClassName();
  external static void PrepareUniforms(List<String> uniforms, IImageProcessingConfigurationDefines defines);
  external static void PrepareSamplers(List<String> samplersList, IImageProcessingConfigurationDefines defines);
  external void prepareDefines(IImageProcessingConfigurationDefines defines, [bool forPostProcess]);
  external bool isReady();
  external void bind(Effect effect, [num overrideAspectRatio]);
  external ImageProcessingConfiguration clone();
  external dynamic serialize();
  external static ImageProcessingConfiguration Parse(dynamic source);
}
