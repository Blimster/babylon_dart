part of babylon;

/// class PBRSubSurfaceConfiguration
@JS()
class PBRSubSurfaceConfiguration {
  external PBRSubSurfaceConfiguration(void Function() markAllSubMeshesAsTexturesDirty, void Function() markScenePrePassDirty, Scene scene);
  external Color3 get scatteringDiffusionProfile;
  external num get volumeIndexOfRefraction;
  external bool get disableAlphaBlending;
  external bool get isRefractionEnabled;
  external bool get isTranslucencyEnabled;
  external bool get isScatteringEnabled;
  external num get refractionIntensity;
  external num get translucencyIntensity;
  external bool get useAlbedoToTintRefraction;
  external BaseTexture get thicknessTexture;
  external BaseTexture get refractionTexture;
  external num get indexOfRefraction;
  external bool get invertRefractionY;
  external bool get linkRefractionWithTransparency;
  external num get minimumThickness;
  external num get maximumThickness;
  external Color3 get tintColor;
  external num get tintColorAtDistance;
  external Color3 get diffusionDistance;
  external bool get useMaskFromThicknessTexture;
  external bool get useMaskFromThicknessTextureGltf;
  external set scatteringDiffusionProfile(Color3 c);
  external set volumeIndexOfRefraction(num value);
  external set isRefractionEnabled(bool isRefractionEnabled);
  external set isTranslucencyEnabled(bool isTranslucencyEnabled);
  external set isScatteringEnabled(bool isScatteringEnabled);
  external set refractionIntensity(num refractionIntensity);
  external set translucencyIntensity(num translucencyIntensity);
  external set useAlbedoToTintRefraction(bool useAlbedoToTintRefraction);
  external set thicknessTexture(BaseTexture thicknessTexture);
  external set refractionTexture(BaseTexture refractionTexture);
  external set indexOfRefraction(num indexOfRefraction);
  external set invertRefractionY(bool invertRefractionY);
  external set linkRefractionWithTransparency(bool linkRefractionWithTransparency);
  external set minimumThickness(num minimumThickness);
  external set maximumThickness(num maximumThickness);
  external set tintColor(Color3 tintColor);
  external set tintColorAtDistance(num tintColorAtDistance);
  external set diffusionDistance(Color3 diffusionDistance);
  external set useMaskFromThicknessTexture(bool useMaskFromThicknessTexture);
  external set useMaskFromThicknessTextureGltf(bool useMaskFromThicknessTextureGltf);
  external bool isReadyForSubMesh(IMaterialSubSurfaceDefines defines, Scene scene);
  external void prepareDefines(IMaterialSubSurfaceDefines defines, Scene scene);
  external void bindForSubMesh(UniformBuffer uniformBuffer, Scene scene, Engine engine, bool isFrozen, bool lodBasedMicrosurface, bool realTimeFiltering);
  external bool unbind(Effect activeEffect);
  external void fillRenderTargetTextures(SmartArray<RenderTargetTexture> renderTargets);
  external bool hasTexture(BaseTexture texture);
  external bool hasRenderTargetTextures();
  external void getActiveTextures(List<BaseTexture> activeTextures);
  external void getAnimatables(List<IAnimatable> animatables);
  external void dispose([bool forceDisposeTextures]);
  external String getClassName();
  external static num AddFallbacks(IMaterialSubSurfaceDefines defines, EffectFallbacks fallbacks, num currentRank);
  external static void AddUniforms(List<String> uniforms);
  external static void AddSamplers(List<String> samplers);
  external static void PrepareUniformBuffer(UniformBuffer uniformBuffer);
  external void copyTo(PBRSubSurfaceConfiguration configuration);
  external dynamic serialize();
  external void parse(dynamic source, Scene scene, String rootUrl);
}
